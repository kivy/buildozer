import pygame
import random
import math

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Space Shooter")

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 50, 50)
GREEN = (50, 255, 50)
BLUE = (50, 150, 255)
YELLOW = (255, 255, 0)
PURPLE = (180, 70, 255)

# Player class
class Player:
    def __init__(self):
        self.x = WIDTH // 2
        self.y = HEIGHT - 50
        self.radius = 20
        self.speed = 5
        self.color = BLUE
        self.shoot_cooldown = 0
        self.health = 100
        
    def draw(self):
        # Draw player ship
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)
        pygame.draw.circle(screen, WHITE, (self.x, self.y), self.radius - 5, 2)
        
        # Draw ship details
        pygame.draw.polygon(screen, self.color, [
            (self.x, self.y - self.radius - 10),
            (self.x - self.radius, self.y),
            (self.x + self.radius, self.y)
        ])
        
        # Draw health bar
        pygame.draw.rect(screen, RED, (self.x - 20, self.y + 30, 40, 5))
        pygame.draw.rect(screen, GREEN, (self.x - 20, self.y + 30, 40 * (self.health / 100), 5))
    
    def move(self, keys):
        if keys[pygame.K_LEFT] and self.x - self.radius > 0:
            self.x -= self.speed
        if keys[pygame.K_RIGHT] and self.x + self.radius < WIDTH:
            self.x += self.speed
        if keys[pygame.K_UP] and self.y - self.radius > 0:
            self.y -= self.speed
        if keys[pygame.K_DOWN] and self.y + self.radius < HEIGHT:
            self.y += self.speed
            
    def update(self):
        if self.shoot_cooldown > 0:
            self.shoot_cooldown -= 1
    
    def shoot(self, bullets):
        if self.shoot_cooldown == 0:
            bullets.append(Bullet(self.x, self.y - self.radius))
            self.shoot_cooldown = 15

# Bullet class
class Bullet:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 4
        self.speed = 7
        self.color = YELLOW
        
    def draw(self):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)
        pygame.draw.circle(screen, WHITE, (self.x, self.y), self.radius - 1, 1)
        
    def update(self):
        self.y -= self.speed
        
    def off_screen(self):
        return self.y < 0

# Enemy class
class Enemy:
    def __init__(self):
        self.radius = random.randint(10, 25)
        self.x = random.randint(self.radius, WIDTH - self.radius)
        self.y = random.randint(-100, -self.radius)
        self.speed = random.uniform(1.0, 3.0)
        self.color = RED if self.radius > 15 else PURPLE
        
    def draw(self):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)
        pygame.draw.circle(screen, WHITE, (self.x, self.y), self.radius - 3, 2)
        
        # Draw enemy details
        pygame.draw.circle(screen, (100, 0, 0), (self.x, self.y), self.radius // 2)
        
    def update(self):
        self.y += self.speed
        
    def off_screen(self):
        return self.y > HEIGHT + self.radius
        
    def collide(self, obj):
        distance = math.sqrt((self.x - obj.x)**2 + (self.y - obj.y)**2)
        return distance < self.radius + obj.radius

# Star background class
class Star:
    def __init__(self):
        self.x = random.randint(0, WIDTH)
        self.y = random.randint(0, HEIGHT)
        self.size = random.randint(1, 3)
        self.speed = random.uniform(0.2, 1.0)
        
    def draw(self):
        brightness = random.randint(150, 255)
        pygame.draw.circle(screen, (brightness, brightness, brightness), (self.x, self.y), self.size)
        
    def update(self):
        self.y += self.speed
        if self.y > HEIGHT:
            self.y = 0
            self.x = random.randint(0, WIDTH)

# Game setup
player = Player()
bullets = []
enemies = []
stars = [Star() for _ in range(100)]
score = 0
game_over = False
spawn_timer = 0

# Font setup
font = pygame.font.SysFont(None, 36)

# Main game loop
clock = pygame.time.Clock()
running = True

while running:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not game_over:
                player.shoot(bullets)
            if event.key == pygame.K_r and game_over:
                # Reset game
                player = Player()
                bullets = []
                enemies = []
                score = 0
                game_over = False
    
    if not game_over:
        # Get keyboard state
        keys = pygame.key.get_pressed()
        
        # Update player
        player.move(keys)
        player.update()
        
        # Update bullets
        for bullet in bullets[:]:
            bullet.update()
            if bullet.off_screen():
                bullets.remove(bullet)
        
        # Spawn enemies
        spawn_timer += 1
        if spawn_timer >= 30:  # Spawn every 30 frames
            enemies.append(Enemy())
            spawn_timer = 0
        
        # Update enemies
        for enemy in enemies[:]:
            enemy.update()
            if enemy.off_screen():
                enemies.remove(enemy)
            
            # Check for collision with player
            if enemy.collide(player):
                player.health -= 10
                enemies.remove(enemy)
                if player.health <= 0:
                    game_over = True
            
            # Check for collision with bullets
            for bullet in bullets[:]:
                if enemy.collide(bullet):
                    if bullet in bullets:
                        bullets.remove(bullet)
                    if enemy in enemies:
                        enemies.remove(enemy)
                    score += 10
                    break
    
    # Update stars
    for star in stars:
        star.update()
    
    # Draw everything
    screen.fill(BLACK)
    
    # Draw stars
    for star in stars:
        star.draw()
    
    # Draw player
    player.draw()
    
    # Draw bullets
    for bullet in bullets:
        bullet.draw()
    
    # Draw enemies
    for enemy in enemies:
        enemy.draw()
    
    # Draw score
    score_text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))
    
    # Draw game over screen
    if game_over:
        game_over_text = font.render("GAME OVER", True, RED)
        restart_text = font.render("Press R to Restart", True, GREEN)
        screen.blit(game_over_text, (WIDTH//2 - game_over_text.get_width()//2, HEIGHT//2 - 50))
        screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, HEIGHT//2 + 10))
    
    # Update display
    pygame.display.flip()
    
    # Cap the frame rate
    clock.tick(60)

pygame.quit()
